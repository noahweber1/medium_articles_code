‚ùØ terraform plan
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

data.archive_file.fraud_detection_archive: Refreshing state...
data.aws_caller_identity.current: Refreshing state...

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # data.template_file.instance_init will be read during apply
  # (config refers to values not yet known)
 <= data "template_file" "instance_init"  {
      + id       = (known after apply)
      + rendered = (known after apply)
      + template = <<~EOT
            cd /home/ec2-user/SageMaker
            aws s3 cp s3://${function_bucket_name}-${aws_region}/fraud-detection-using-machine-learning/${function_version}/notebooks/sagemaker_fraud_detection.ipynb .
            sed -i 's/fraud-detection-end-to-end-demo/${s3_bucket_name_1}/g' sagemaker_fraud_detection.ipynb
        EOT
      + vars     = {
          + "aws_region"           = "eu-west-2"
          + "function_bucket_name" = "lamda-bucket"
          + "function_version"     = "1"
          + "s3_bucket_name_1"     = (known after apply)
        }
    }

  # aws_cloudwatch_event_rule.fraud_detection_scheduled_rule will be created
  + resource "aws_cloudwatch_event_rule" "fraud_detection_scheduled_rule" {
      + arn                 = (known after apply)
      + description         = "ScheduledRule"
      + id                  = (known after apply)
      + is_enabled          = false
      + name                = "fraud-detection-scheduled-rule"
      + schedule_expression = "rate(1 minute)"
      + tags                = {
          + "CreatedBy" = "terraform"
          + "Group"     = "fraud-detection"
        }
    }

  # aws_cloudwatch_event_target.fraud_detection will be created
  + resource "aws_cloudwatch_event_target" "fraud_detection" {
      + arn       = (known after apply)
      + id        = (known after apply)
      + rule      = "fraud-detection-scheduled-rule"
      + target_id = "TargetFunctionV1"
    }

  # aws_iam_policy.fraud_detection_firehose_policy will be created
  + resource "aws_iam_policy" "fraud_detection_firehose_policy" {
      + arn         = (known after apply)
      + description = "Policy for the Amazon Kinesis Data Firehose to save data to S3 bucket"
      + id          = (known after apply)
      + name        = "fraud-detection-firehose-policy"
      + path        = "/"
      + policy      = (known after apply)
    }

  # aws_iam_policy.fraud_detection_lambda_policy will be created
  + resource "aws_iam_policy" "fraud_detection_lambda_policy" {
      + arn         = (known after apply)
      + description = "Policy for the fraud detection function to put records into the Amazon Kinesis Data Firehose"
      + id          = (known after apply)
      + name        = "fraud-detection-lambda-policy"
      + path        = "/"
      + policy      = (known after apply)
    }

  # aws_iam_policy.sm_notebook_instance_policy will be created
  + resource "aws_iam_policy" "sm_notebook_instance_policy" {
      + arn         = (known after apply)
      + description = "Policy for the Notebook Instance to manage training jobs, models and endpoints"
      + id          = (known after apply)
      + name        = "sm-notebook-instance-policy"
      + path        = "/"
      + policy      = (known after apply)
    }

  # aws_iam_role.fraud_detection_firehose_role will be created
  + resource "aws_iam_role" "fraud_detection_firehose_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "firehose.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "fraud-detection-firehose-role"
      + path                  = "/"
      + tags                  = {
          + "CreatedBy" = "terraform"
          + "Group"     = "fraud-detection"
        }
      + unique_id             = (known after apply)
    }

  # aws_iam_role.fraud_detection_lambda_role will be created
  + resource "aws_iam_role" "fraud_detection_lambda_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "fraud-detection-lambda-role"
      + path                  = "/"
      + tags                  = {
          + "CreatedBy" = "terraform"
          + "Group"     = "fraud-detection"
        }
      + unique_id             = (known after apply)
    }

  # aws_iam_role.sm_notebook_instance_role will be created
  + resource "aws_iam_role" "sm_notebook_instance_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "sagemaker.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "sm-notebook-instance-role"
      + path                  = "/"
      + tags                  = {
          + "CreatedBy" = "terraform"
          + "Group"     = "fraud-detection"
        }
      + unique_id             = (known after apply)
    }

  # aws_iam_role_policy_attachment.fraud_detection_firehose will be created
  + resource "aws_iam_role_policy_attachment" "fraud_detection_firehose" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "fraud-detection-firehose-role"
    }

  # aws_iam_role_policy_attachment.fraud_detection_lambda will be created
  + resource "aws_iam_role_policy_attachment" "fraud_detection_lambda" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "fraud-detection-lambda-role"
    }

  # aws_iam_role_policy_attachment.sm_notebook_instance will be created
  + resource "aws_iam_role_policy_attachment" "sm_notebook_instance" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "sm-notebook-instance-role"
    }

  # aws_kinesis_firehose_delivery_stream.fraud_detection_firehose_stream will be created
  + resource "aws_kinesis_firehose_delivery_stream" "fraud_detection_firehose_stream" {
      + arn            = (known after apply)
      + destination    = "s3"
      + destination_id = (known after apply)
      + id             = (known after apply)
      + name           = "fraud-detection-firehose-stream"
      + tags           = {
          + "CreatedBy" = "terraform"
          + "Group"     = "fraud-detection"
        }
      + version_id     = (known after apply)

      + s3_configuration {
          + bucket_arn         = (known after apply)
          + buffer_interval    = 60
          + buffer_size        = 100
          + compression_format = "GZIP"
          + prefix             = "fraud-detection/firehose/"
          + role_arn           = (known after apply)

          + cloudwatch_logging_options {
              + enabled         = (known after apply)
              + log_group_name  = (known after apply)
              + log_stream_name = (known after apply)
            }
        }
    }

  # aws_lambda_function.fraud_detection_event_processor will be created
  + resource "aws_lambda_function" "fraud_detection_event_processor" {
      + arn                            = (known after apply)
      + function_name                  = "fraud-detection-event-processor"
      + handler                        = "index.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "python3.6"
      + s3_bucket                      = (known after apply)
      + s3_key                         = "fraud-detection-using-machine-learning/1/fraud_detection.zip"
      + source_code_hash               = "drsFUujtfxWaaAyLLL8F3YTco0RyOGpAo72FGtbW+L4="
      + source_code_size               = (known after apply)
      + tags                           = {
          + "CreatedBy" = "terraform"
          + "Group"     = "fraud-detection"
        }
      + timeout                        = 3
      + version                        = (known after apply)

      + tracing_config {
          + mode = (known after apply)
        }
    }

  # aws_lambda_permission.fraud_detection will be created
  + resource "aws_lambda_permission" "fraud_detection" {
      + action        = "lambda:InvokeFunction"
      + function_name = "fraud-detection-event-processor"
      + id            = (known after apply)
      + principal     = "events.amazonaws.com"
      + source_arn    = (known after apply)
      + statement_id  = (known after apply)
    }

  # aws_s3_bucket.fraud_detection_function_bucket will be created
  + resource "aws_s3_bucket" "fraud_detection_function_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "lamda-bucket-eu-west-2"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "CreatedBy"   = "terraform"
          + "Description" = "Bucket hosting the code for fraud_detection Lambda function."
          + "Group"       = "fraud-detection"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + server_side_encryption_configuration {
          + rule {
              + apply_server_side_encryption_by_default {
                  + sse_algorithm = "AES256"
                }
            }
        }

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

  # aws_s3_bucket.s3_bucket_1 will be created
  + resource "aws_s3_bucket" "s3_bucket_1" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "bucket-1-eu-west-2"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = true
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "CreatedBy"   = "terraform"
          + "Description" = "Bucket for storing the Amazon SageMaker model and training data."
          + "Group"       = "fraud-detection"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + server_side_encryption_configuration {
          + rule {
              + apply_server_side_encryption_by_default {
                  + sse_algorithm = "AES256"
                }
            }
        }

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

  # aws_s3_bucket.s3_bucket_2 will be created
  + resource "aws_s3_bucket" "s3_bucket_2" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "bucket-2-eu-west-2"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = true
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "CreatedBy"   = "terraform"
          + "Description" = "Bucket for storing processed events for visualization features."
          + "Group"       = "fraud-detection"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + server_side_encryption_configuration {
          + rule {
              + apply_server_side_encryption_by_default {
                  + sse_algorithm = "AES256"
                }
            }
        }

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

  # aws_s3_bucket_object.s3_fraud_detection_archive will be created
  + resource "aws_s3_bucket_object" "s3_fraud_detection_archive" {
      + acl                    = "private"
      + bucket                 = (known after apply)
      + content_type           = (known after apply)
      + etag                   = "45ac1e0db8aba0472ac7a2e44a8af99a"
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "fraud-detection-using-machine-learning/1/fraud_detection.zip"
      + server_side_encryption = (known after apply)
      + source                 = "./../dist/fraud_detection.zip"
      + storage_class          = (known after apply)
      + version_id             = (known after apply)
    }

  # aws_s3_bucket_object.s3_fraud_detection_notebook will be created
  + resource "aws_s3_bucket_object" "s3_fraud_detection_notebook" {
      + acl                    = "private"
      + bucket                 = (known after apply)
      + content_type           = (known after apply)
      + etag                   = "807555ee32ce7a9cb0b1d6073c6673c0"
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "fraud-detection-using-machine-learning/1/notebooks/sagemaker_fraud_detection.ipynb"
      + server_side_encryption = (known after apply)
      + source                 = "./../source/notebooks/sagemaker_fraud_detection.ipynb"
      + storage_class          = (known after apply)
      + version_id             = (known after apply)
    }

  # aws_sagemaker_notebook_instance.basic will be created
  + resource "aws_sagemaker_notebook_instance" "basic" {
      + arn                    = (known after apply)
      + direct_internet_access = "Enabled"
      + id                     = (known after apply)
      + instance_type          = "ml.t2.medium"
      + lifecycle_config_name  = "BasicNotebookInstanceLifecycleConfig"
      + name                   = "FraudDetectionNotebookInstance"
      + role_arn               = (known after apply)
      + security_groups        = (known after apply)
      + tags                   = {
          + "CreatedBy" = "terraform"
          + "Group"     = "fraud-detection"
        }
    }

  # aws_sagemaker_notebook_instance_lifecycle_configuration.basic_lifecycle will be created
  + resource "aws_sagemaker_notebook_instance_lifecycle_configuration" "basic_lifecycle" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + name     = "BasicNotebookInstanceLifecycleConfig"
      + on_start = (known after apply)
    }

Plan: 21 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

‚ùØ 
‚ùØ 